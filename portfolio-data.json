{
  "personalInfo": {
    "name": "Misbah ul Haque",
    "title": "Experienced Android Developer",
    "subtitle": "Innovative Android Developer with 2+ years of experience in creating user-centric mobile and Android TV applications. Proficient in Kotlin and Jetpack Compose, delivering high-quality solutions that elevate user engagement.",
    "email": "misbahul8@gmail.com",
    "phone": "+91-8376069521",
    "linkedin": "https://linkedin.com/in/misbahhaque",
    "github": "https://github.com/Misbah542",
    "resumePdfUrl": "/resume/Misbah_ul_Haque_Resume.pdf"
  },
  "terminalQuotes": [
    "// TODO: Fix this bug... eventually üòÖ",
    "git commit -m \"Fixed the bug that fixed the bug\"",
    "// This code works, don't touch it!",
    "if (coffee.isEmpty()) { developer.crash() }",
    "// Here be dragons üêâ",
    "try { coffee() } catch (EmptyCupException e) { refill() }",
    "// I don't know why this works, but it does",
    "Android Studio: \"Indexing...\" Me: \"Still?!\"",
    "gradle.build.failed.retry(‚àû)",
    "// Temporary fix, will refactor later (3 years ago)",
    "findViewById() is dead. Long live ViewBinding!",
    "Jetpack Compose > XML (fight me)",
    "// Stack Overflow saved my life again",
    "when (mood) { HAPPY -> code() SAD -> debug() }",
    "Kotlin Coroutines: Making async look easy since 2017",
    "// If you're reading this, you're probably debugging",
    "Android: 14 API levels, 14 different behaviors",
    "ProGuard rules: The real final boss",
    "// Works on my device ¬Ø\\_(„ÉÑ)_/¬Ø",
    "git push --force // YOLO",
    "// TODO: Make the impossible possible with Kotlin",
    "fun buildAmazingApps(): Android { return magic() }",
    "while (true) { learn(); code(); innovate(); }",
    "if (bug) { coffee++; debug(); } else { celebrate(); }",
    "class Life : Android() { override fun onCreate() { code() } }",
    "val success = dedication + coffee + Stack Overflow",
    "catch (Exception e) { /* There are no bugs, only features */ }",
    "@Composable fun MyLife() { LazyColumn { items(‚àû) { Code() } } }",
    "// Warning: This developer runs on coffee and determination",
    "git commit -m \"Fixed bug that wasn't supposed to exist\"",
    "// Turning coffee into code since 2022",
    "sudo make me an Android developer",
    "404: Sleep not found. Continue coding? Y/n",
    "// Debugging: Being the detective in a crime you committed",
    "gradle.properties: android.enableJetifier=true // Magic happens",
    "findViewById<TextView>(R.id.legacy) // Those were the days",
    "viewBinding.enabled = true // Life got easier",
    "coroutineScope.launch { changeTheWorld() }",
    "// Android Studio: Where Ctrl+Z is your best friend",
    "@Deprecated(\"XML layouts\") // Long live Compose!",
    "when (mood) { HAPPY -> code() TIRED -> code() else -> coffee() }",
    "// In Compose we trust, in XML we rust",
    "LaunchedEffect(Unit) { while(true) { innovate() } }",
    "// From Java to Kotlin: Evolution of happiness",
    "buildFeatures { compose true } // Welcome to the future"
  ],
  "experience": [
    {
      "title": "Software Development Engineer II - Android",
      "company": "Viacom Media (JioCinema)",
      "period": "June 2024 - Present",
      "achievements": [
        "Optimised app startup time by 60% leveraging Content Provider and Android Startup Library",
        "Implemented Contextual Continue Watching, reducing API response times by 6 seconds",
        "Maintained 99.9% crash-free rate during high-concurrency events with 50M+ users",
        "Upgraded analytics and impression tracking for better performance insights"
      ]
    },
    {
      "title": "Software Development Engineer I - Android",
      "company": "Viacom Media (JioCinema)",
      "period": "July 2022 - May 2024",
      "achievements": [
        "Led Android TV Player Skin redesign achieving 40% reduction in rendering time",
        "Built Login with QR Code functionality using MVVM architecture",
        "Maintained 99.6% crash-free rate during FIFA World Cup 2022 and IPL 2023",
        "Played critical role in optimizing app performance for high-traffic events"
      ]
    }
  ],
  "skills": {
    "languages": ["Kotlin", "Java", "XML"],
    "frameworks": ["Jetpack Compose", "Android Leanback", "ExoPlayer"],
    "architecture": ["MVVM", "MVI", "Clean Architecture", "DI"],
    "tools": ["Android Studio", "Firebase", "Git"],
    "libraries": ["Retrofit", "Room", "Dagger/Hilt", "Coroutines"],
    "testing": ["JUnit", "Espresso", "MockK", "Robolectric"]
  },
  "education": {
    "degree": "BTech in Electronics and Communication",
    "institution": "PES University (RR Campus)",
    "period": "2018 - 2022",
    "additional": "Minors in Computer Science"
  },
  "projects": [
   {
      "id": "proj1",
      "name": "Tetris Game",
      "icon": "üéÆ",
      "description": "Fully functional Tetris game using Jetpack Compose with real-time game mechanics, collision detection, and scoring system.",
      "technologies": ["Compose", "Coroutines", "MVVM", "LiveData"]
    },
    {
      "id": "proj2",
      "name": "Weather App",
      "icon": "üå§Ô∏è",
      "description": "Dynamic weather application with custom calculator, real-time data from OpenWeather API, and theme changes based on conditions.",
      "technologies": ["Retrofit", "API", "Compose", "MVVM"]
    }
  ]
}